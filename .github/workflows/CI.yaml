name: CI
env:
  DEBUG: napi:*
  APP_NAME: binary-info
  MACOSX_DEPLOYMENT_TARGET: '10.13'

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            build: yarn build
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=256
              export CARGO_PROFILE_RELEASE_LTO=false
              yarn build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --target aarch64-pc-windows-msvc
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              yarn build --target=aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            build: |
              yarn build 
              strip binary-info.linux-x64-gnu.node
          - host: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu -y
            build: |
              export PKG_CONFIG_ALLOW_CROSS=1
              export PKG_CONFIG_PATH='/usr/lib/aarch64-linux-gnu/pkgconfig'
              yarn build --target=aarch64-unknown-linux-gnu
              aarch64-linux-gnu-strip binary-info.linux-arm64-gnu.node
          - host: ubuntu-20.04
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: |
              export PKG_CONFIG_ALLOW_CROSS=1
              export PKG_CONFIG_PATH='/usr/lib/arm-linux-gnueabihf/pkgconfig'
              yarn build --target=armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip binary-info.linux-arm-gnueabihf.node

    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v2
      - uses: volta-cli/action@v4
      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          target: ${{ matrix.settings.target }}
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            ${{ env.APP_NAME }}.*.node
            index.*

  test:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      fail-fast: false
      matrix:
        node:
          - 12
          - 14
          - 16
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
          - host: windows-latest
            target: i686-pc-windows-msvc
            arch: x86
          - host: macos-latest
            target: x86_64-apple-darwin
            arch: x64
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x64

    name: Test Node ${{ matrix.node }} ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    needs: build

    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.settings.arch }}
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: ./
      - name: Run Tests
        run: yarn test

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v2
      - uses: volta-cli/action@v4
      - name: Install dependencies
        run: yarn install --network-timeout 300000
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: ./

      - name: Publish Dry Run
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --dry-run --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
